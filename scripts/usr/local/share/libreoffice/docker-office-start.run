#!/bin/bash
# =========================================================================
# =========================================================================
#
#	docker-office-start
#	  Creates a new container, if needed, then starts it.
#
# =========================================================================
#
# @author Jay Wheeler.
# @version 0.0.1
# @copyright © 2018. EarthWalk Software.
# @license Licensed under the GNU General Public License, GPL-3.0-or-later.
# @package ewsdocker/debian-libreoffice
# @subpackage docker-office-start
#
# =========================================================================
#
#	Copyright © 2018. EarthWalk Software
#	Licensed under the GNU General Public License, GPL-3.0-or-later.
#
#   This file is part of ewsdocker/debian-libreoffice.
#
#   ewsdocker/debian-libreoffice is free software: you can redistribute 
#   it and/or modify it under the terms of the GNU General Public License 
#   as published by the Free Software Foundation, either version 3 of the 
#   License, or (at your option) any later version.
#
#   ewsdocker/debian-libreoffice is distributed in the hope that it will 
#   be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
#   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with ewsdocker/debian-libreoffice.  If not, see 
#   <http://www.gnu.org/licenses/>.
#
# =========================================================================
# =========================================================================

declare container="debian-libreoffice"
declare status=""

# =========================================================================
#
#	getStatus
#
#		get the current status of the application
#
#	attributes:
#		filters = string to explode
#    Result:
#        0 = no error
#        non-zero = error number
#
# =========================================================================
function getStatus()
{
  status=$(docker ps -a --filter name=${container} --filter status="${1}" )
  [[ $? -eq 0 ]] || 
   {
     echo "docker ps failed."
     return 1
   }

  return 0
}

# =========================================================================
# =========================================================================

# =========================================================================
#
#  if already running, exit with no exception
#
# =========================================================================

getStatus "running"
[[ $? -eq 0 ]] || exit 1

if echo "$status" | grep -q "Up" ; then

   echo
   echo "${container} is already running"
   echo

   exit 0
fi

echo
echo "${container} is not running... checking for stopped container."

# =========================================================================
#
#  if exited, docker start
#
# =========================================================================

getStatus "exited"
[[ $? -eq 0 ]] || exit 2

if echo "$status" | grep -q "Exited" ; then

   echo
   echo "starting ${container}"
   echo
   
   docker start ${container}
   [[ $? -eq 0 ]] &&
    {
       echo "${container} started."
       echo

       exit 0
    }
fi

echo
echo -n "${container} was not found..."

# =========================================================================
#
# otherwise, create the container and exit
#
# =========================================================================

echo " creating new container: ${container}."

if [ -e "~/bin/${container}.run" ]; then

   echo
   echo "Unknown container: ${container}."
   exit 3

fi

~/bin/${container}.run & > /dev/null 2>&1
disown

# =========================================================================

echo
echo "Started ${container}"

exit 0
